(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{"5HNO":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return h})),n.d(t,"default",(function(){return d}));n("5hJT"),n("W1QL"),n("K/PF"),n("t91x"),n("75LO"),n("PJhk");var o=n("mXGw"),i=n("/FXl"),r=n("TjRS"),a=n("ZFoC"),c=n("6j+u"),s=n("bFyf");n("aD51");function u(){return(u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e}).apply(this,arguments)}var h={};void 0!==h&&h&&h===Object(h)&&Object.isExtensible(h)&&!h.hasOwnProperty("__filemeta")&&Object.defineProperty(h,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/SeeThrough.mdx"}});var l={_frontmatter:h},b=r.a;function d(e){var t,n,d,p=e.components,v=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,["components"]);return Object(i.b)(b,u({},l,v,{components:p,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"seethrough"},"SeeThrough"),Object(i.b)("h2",{id:"props"},"Props"),Object(i.b)(a.d,{of:c.a,isToggle:!0,mdxType:"Props"}),Object(i.b)("h2",{id:"importing"},"Importing"),Object(i.b)("p",null,"To use the react-see-through component, you want to do:"),Object(i.b)("code",null,"import { SeeThrough } from 'react-see-through';"),Object(i.b)("p",null,"after installing."),Object(i.b)("h2",{id:"basic-usage"},"Basic usage"),Object(i.b)("h3",{id:"clicking-on-the-masked-black-area-stops-the-see-through-effect"},"Clicking on the masked (black) area stops the see-through effect."),Object(i.b)(a.c,{__position:2,__code:"() => {\n  const [active, setActive] = useState(false)\n  return (\n    <div style={{ padding: '60px' }}>\n      <button onClick={() => setActive(true)}>Activate</button>\n      <SeeThrough\n        active={active}\n        onClick={masked => masked && setActive(false)}\n      >\n        <div>Some text</div>\n        <div>Other text</div>\n      </SeeThrough>\n    </div>\n  )\n}",__scope:(t={props:v,DefaultLayout:r.a,useState:o.useState,Playground:a.c,Props:a.d,SeeThrough:c.a,SeeThroughController:s.a},t.DefaultLayout=r.a,t._frontmatter=h,t),mdxType:"Playground"},(function(){var e=Object(o.useState)(!1),t=e[0],n=e[1];return Object(i.b)("div",{style:{padding:"60px"}},Object(i.b)("button",{onClick:function(){return n(!0)}},"Activate"),Object(i.b)(c.a,{active:t,onClick:function(e){return e&&n(!1)},mdxType:"SeeThrough"},Object(i.b)("div",null,"Some text"),Object(i.b)("div",null,"Other text")))})),Object(i.b)("hr",null),Object(i.b)("h2",{id:"enable-user-interaction-clickhover-with-seethrough-elements"},"Enable user interaction (click/hover/...) with SeeThrough elements"),Object(i.b)("h4",{id:"note-this-gets-slower-as-your-page-widthheight-and-the-number-of-active-seethroughs-at-once-increase-read-below-about-how-interactivity-works-to-understand-why"},"NOTE: This gets slower as your page width/height and the number of active SeeThroughs at once increase. Read below about how interactivity works to understand why."),Object(i.b)("h4",{id:"it-should-be-fast-enough-in-most-cases-but-you-should-test-it-and-determine-if-its-fast-enough-for-your-use-case"},"It should be fast enough in most cases but you should test it and determine if it's fast enough for your use case."),Object(i.b)(a.c,{__position:3,__code:"() => {\n  const [active, setActive] = useState(false)\n  return (\n    <div style={{ padding: '60px' }}>\n      <button onClick={() => setActive(true)}>Activate</button>\n      <SeeThrough interactive active={active}>\n        <div>Some text</div>\n        <div>Other text</div>\n        {active && <button onClick={() => setActive(false)}>Close</button>}\n      </SeeThrough>\n    </div>\n  )\n}",__scope:(n={props:v,DefaultLayout:r.a,useState:o.useState,Playground:a.c,Props:a.d,SeeThrough:c.a,SeeThroughController:s.a},n.DefaultLayout=r.a,n._frontmatter=h,n),mdxType:"Playground"},(function(){var e=Object(o.useState)(!1),t=e[0],n=e[1];return Object(i.b)("div",{style:{padding:"60px"}},Object(i.b)("button",{onClick:function(){return n(!0)}},"Activate"),Object(i.b)(c.a,{interactive:!0,active:t,mdxType:"SeeThrough"},Object(i.b)("div",null,"Some text"),Object(i.b)("div",null,"Other text"),t&&Object(i.b)("button",{onClick:function(){return n(!1)}},"Close")))})),Object(i.b)("hr",null),Object(i.b)("h2",{id:"absolutefixed-elements"},"Absolute/fixed elements"),Object(i.b)("h3",{id:"uses-childsearchdepth-to-explicitly-search-more-children-see-the-props-documentation-at-the-top-for-more-info"},"Uses childSearchDepth to explicitly search more children. See the props documentation at the top for more info."),Object(i.b)("h4",{id:"note-if-you-dont-know-what-depth-to-use-just-use-numberpositive_infinity-and-only-lower-it-if-things-get-slow"},"NOTE: If you don't know what depth to use, just use ",Object(i.b)("inlineCode",{parentName:"h4"},"Number.POSITIVE_INFINITY")," and only lower it if things get slow."),Object(i.b)(a.c,{__position:4,__code:"() => {\n  const [active, setActive] = useState(false)\n  return (\n    <div style={{ padding: '60px' }}>\n      <button onClick={() => setActive(true)}>Activate</button>\n      <SeeThrough\n        active={active}\n        onClick={masked => masked && setActive(false)}\n        childSearchDepth={2}\n      >\n        <div>\n          <div>My cool content</div>\n          <div style={{ position: 'absolute', left: 50 }}>\n            Other absoluteLY cool content\n          </div>\n        </div>\n      </SeeThrough>\n    </div>\n  )\n}",__scope:(d={props:v,DefaultLayout:r.a,useState:o.useState,Playground:a.c,Props:a.d,SeeThrough:c.a,SeeThroughController:s.a},d.DefaultLayout=r.a,d._frontmatter=h,d),mdxType:"Playground"},(function(){var e=Object(o.useState)(!1),t=e[0],n=e[1];return Object(i.b)("div",{style:{padding:"60px"}},Object(i.b)("button",{onClick:function(){return n(!0)}},"Activate"),Object(i.b)(c.a,{active:t,onClick:function(e){return e&&n(!1)},childSearchDepth:2,mdxType:"SeeThrough"},Object(i.b)("div",null,Object(i.b)("div",null,"My cool content"),Object(i.b)("div",{style:{position:"absolute",left:50}},"Other absoluteLY cool content"))))})),Object(i.b)("hr",null),Object(i.b)("h2",{id:"multiple-active-seethroughs-at-once"},"Multiple active SeeThroughs at once"),Object(i.b)("p",null,"Look at ",Object(i.b)("a",u({parentName:"p"},{href:"/react-see-through/docs/see-through-controller"}),"SeeThroughController")," for examples on multiple active SeeThroughs"),Object(i.b)("h2",{id:"how-do-interactive-seethroughs-work"},"How do interactive SeeThroughs work?"),Object(i.b)("p",null,"For non-interactive SeeThroughs a canvas is overlayed on the whole page and painted transparent in the locations of your SeeThrough elements.\nThis can't be done for interactive SeeThroughs because having a canvas over everything prevents interaction.\nThus, the way interactivity works is by creating several boxes around all of your SeeThrough elements.\nComputing this set of boxes is computationally expensive, scaling with page size and the number of active SeeThrough elements."))}void 0!==d&&d&&d===Object(d)&&Object.isExtensible(d)&&!d.hasOwnProperty("__filemeta")&&Object.defineProperty(d,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/SeeThrough.mdx"}}),d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-see-through-mdx-45e5b6707ef1c9a60403.js.map